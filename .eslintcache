[{"/home/onyx/Documents/DEV/ReactJS/sdi/src/index.js":"1","/home/onyx/Documents/DEV/ReactJS/sdi/src/reportWebVitals.js":"2","/home/onyx/Documents/DEV/ReactJS/sdi/src/App.js":"3","/home/onyx/Documents/DEV/ReactJS/sdi/src/components/Main.jsx":"4","/home/onyx/Documents/DEV/ReactJS/sdi/src/components/Home.jsx":"5","/home/onyx/Documents/DEV/ReactJS/sdi/src/components/utils/Modal.jsx":"6","/home/onyx/Documents/DEV/ReactJS/sdi/src/components/Form/index.jsx":"7","/home/onyx/Documents/DEV/ReactJS/sdi/src/components/Form/MyTextInput.jsx":"8","/home/onyx/Documents/DEV/ReactJS/sdi/src/components/Form/MyCheckbox.jsx":"9","/home/onyx/Documents/DEV/ReactJS/sdi/src/components/Form/MySelect.jsx":"10","/home/onyx/Documents/DEV/ReactJS/sdi/src/components/Form/Buttons.jsx":"11","/home/onyx/Documents/DEV/ReactJS/sdi/src/constants/index.js":"12","/home/onyx/Documents/DEV/ReactJS/sdi/src/components/EspaceProfessionnel.jsx":"13","/home/onyx/Documents/DEV/ReactJS/sdi/src/components/EspaceEtudiant.jsx":"14","/home/onyx/Documents/DEV/ReactJS/sdi/src/components/Navbar.jsx":"15","/home/onyx/Documents/DEV/ReactJS/sdi/src/components/AccountItems.jsx":"16","/home/onyx/Documents/DEV/ReactJS/sdi/src/components/Form/MyTextArea.jsx":"17"},{"size":660,"mtime":1611450219153,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1608976181023,"results":"20","hashOfConfig":"19"},{"size":1550,"mtime":1612352727760,"results":"21","hashOfConfig":"19"},{"size":8693,"mtime":1609457249490,"results":"22","hashOfConfig":"19"},{"size":46726,"mtime":1612472939605,"results":"23","hashOfConfig":"19"},{"size":1660,"mtime":1612196149344,"results":"24","hashOfConfig":"19"},{"size":392,"mtime":1612369341961,"results":"25","hashOfConfig":"19"},{"size":693,"mtime":1609546681532,"results":"26","hashOfConfig":"19"},{"size":675,"mtime":1612368589825,"results":"27","hashOfConfig":"19"},{"size":883,"mtime":1612094712050,"results":"28","hashOfConfig":"19"},{"size":1001,"mtime":1609523954627,"results":"29","hashOfConfig":"19"},{"size":267,"mtime":1612435717724,"results":"30","hashOfConfig":"19"},{"size":12144,"mtime":1612473462812,"results":"31","hashOfConfig":"19"},{"size":16666,"mtime":1612473863152,"results":"32","hashOfConfig":"19"},{"size":1060,"mtime":1612475073349,"results":"33","hashOfConfig":"19"},{"size":526,"mtime":1612348991372,"results":"34","hashOfConfig":"19"},{"size":704,"mtime":1612369435430,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1u6yefu",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/home/onyx/Documents/DEV/ReactJS/sdi/src/index.js",[],["75","76"],"/home/onyx/Documents/DEV/ReactJS/sdi/src/reportWebVitals.js",[],"/home/onyx/Documents/DEV/ReactJS/sdi/src/App.js",[],"/home/onyx/Documents/DEV/ReactJS/sdi/src/components/Main.jsx",[],"/home/onyx/Documents/DEV/ReactJS/sdi/src/components/Home.jsx",["77"],"import React, {\n    useState,\n    useEffect,\n    createRef\n} from 'react'\nimport videoBack from '../assets/videos/Technology_Background.mp4'\nimport '../assets/css/backgroundVideo.css'\nimport '../assets/css/home.css'\nimport Modal from './utils/Modal'\n\nimport { api_url } from '../constants';\n\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faAngleDown, faWindowClose } from '@fortawesome/free-solid-svg-icons'\n\nimport { Formik, Form } from 'formik';\nimport { MyTextInput, InputButtonDark, InputButtonLight } from './Form';\n\n\nimport * as Yup from 'yup';\nimport { phoneRegExp } from '../constants'\n\nimport backPage from '../assets/imgs/backPage.jpg';\nimport hexagon from '../assets/imgs/hexagon.webp'\nimport coding from '../assets/imgs/coding.jpg'\nimport bToB from '../assets/imgs/bToB.png'\nimport ict_students from '../assets/imgs/ict_students.jpg'\nimport img5 from '../assets/imgs/img5.jpg'\n\n\n\nimport Rotate from 'react-reveal/Rotate'\nimport Zoom from 'react-reveal/Zoom'\nimport Fade from 'react-reveal/Fade'\n\n\n\nconst calculateTimeLeft = () => {\n    const difference = +new Date(2021, 1, 25) - +new Date()\n\n    let timeLeft = {}\n\n    if (difference > 0) {\n        timeLeft = {\n            \"jour(s)\": Math.floor(difference / (1000 * 60 * 60 * 24)),\n            \"heure(s)\": Math.floor((difference / (1000 * 60 * 60)) % 24),\n            \"minute(s)\": Math.floor((difference / 1000 / 60) % 60),\n            \"seconde(s)\": Math.floor((difference / 1000) % 60)\n        };\n    }\n\n    return timeLeft;\n}\n\n\n\n\nexport default function Home({ session, setSession }) {\n\n    const [modalProf, setModalProf] = useState(false)\n    const [modalStudent, setModalStudent] = useState(false)\n    const [modalSchool, setModalSchool] = useState(false)\n    const [erreur, setErreur] = useState({})\n    const [success, setSuccess] = useState({})\n\n    const [popUpDeconnexion, setPopUpDeconnexion] = useState(false)\n\n    const [connexion, setConnexion] = useState(true)\n\n    let initialTime = calculateTimeLeft()\n    const [timeLeft, setTimeLeft] = useState(initialTime);\n\n    let scrollPageRef = createRef()\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            setTimeLeft(calculateTimeLeft());\n        }, 1000)\n        return () => clearTimeout(timer)\n    });\n\n    const timerComponents = [];\n    Object.keys(timeLeft).forEach((interval, ind) => {\n        timerComponents.push(\n            <div key={timerComponents.length} className=\"flex flex-col text-white mx-3 my-2\">\n                <p className=\"font-bold text-8xl text-center\">\n                    {(String(timeLeft[interval]).length > 1) ? timeLeft[interval] : \"0\" + timeLeft[interval]}\n                </p>\n                <p className=\"text-2xl text-center\">\n                    {interval}\n                </p>\n            </div>\n        );\n    });\n\n\n    return (\n        <div>\n            <video id=\"backgroudVideo\" autoPlay loop muted >\n                <source src={videoBack} type=\"video/mp4\" />\n            </video>\n\n            <div className=\"ownMask\"></div>\n\n            <div className=\"grid grid-cols-3 gap-4 h-screen\">\n                <div className=\"col-span-3 row-span-5 flex items-center\">\n                    <h1 className=\"font-mono text-4xl font-semibold text-white ml-5 sm:ml-20 \">\n                        Bienvenue Ã  la <br />Semaine De l'Innovation <br />2021\n                    </h1>\n                </div>\n                <div className=\"col-span-3 row-span-2 gap-x-4 flex items-center justify-evenly flex-col sm:flex-row\">\n                    <button className=\"bg-transparent hover:bg-white text-white font-semibold hover:text-blue-800 py-2 px-4 border border-white hover:border-transparent rounded\"\n                        onClick={() => {\n                            if (session && session.email && session.email !== \"\" && session.profil === \"prof\") {\n                                window.location.pathname = \"/espace_professionnel\"\n                            } else if (session && session.email && session.email !== \"\" && session.profil === \"etudiant\"){\n                                setPopUpDeconnexion(true)\n                            } else {\n                                setModalProf(true)\n                            }\n                        }}>\n                        Professionnel\n                    </button>\n                    <button className=\"bg-transparent hover:bg-white text-white font-semibold hover:text-blue-800 py-2 px-4 border border-white hover:border-transparent rounded\"\n                        onClick={() => {\n                            if (session && session.email && session.email !== \"\" && session.profil === \"etudiant\") {\n                                window.location.pathname = \"/espace_etudiant\"\n                            } else if (session && session.email && session.email !== \"\" && session.profil === \"prof\"){\n                                setPopUpDeconnexion(true)\n                            } else {\n                                setModalStudent(true)\n                            }\n                        }}>\n                        Etudiant\n                    </button>\n                </div>\n                <div className=\"col-span-3 row-span-1 flex justify-center\">\n\n                    <div style={{ cursor: \"pointer\" }} onClick={() => {\n                        scrollPageRef.current.scrollIntoView({ behavior: 'smooth' })\n                    }}>\n                        <FontAwesomeIcon icon={faAngleDown} className=\"mx-4\" color=\"white\" size=\"3x\" />\n                        <FontAwesomeIcon icon={faAngleDown} className=\"mx-4\" color=\"white\" size=\"3x\" />\n                        <FontAwesomeIcon icon={faAngleDown} className=\"mx-4\" color=\"white\" size=\"3x\" />\n                        <FontAwesomeIcon icon={faAngleDown} className=\"mx-4\" color=\"white\" size=\"3x\" />\n                    </div>\n\n                </div>\n            </div>\n\n            <div className=\"grid\" id=\"page\" ref={scrollPageRef} style={{ backgroundImage: `url(${img5})`, backgroundBlendMode: \"multiply\", backgroundSize: \"cover\", backgroundRepeat:\"no-repeat\", backgroundAttachment: \"fixed\" }}>\n                <div className=\"w-full bg-no-repeat\" style={{ backgroundImage: `url(${backPage})`, backgroundBlendMode: \"multiply\", backgroundPosition: \"center center\", backgroundAttachment: \"fixed\" }}>\n                    <div className=\"p-10 py-20 flex flex-col md:flex-row flex-wrap justify-evenly content-center text-white \">\n\n                        {\n                            timerComponents.length\n                                ?\n                                timerComponents\n                                :\n                                <p className=\"font-bold text-6xl text-center\">Place Ã  la Semaine De l'Innovation !</p>\n                        }\n\n                    </div>\n                </div>\n\n\n\n                <div className=\"grid gap-4 w-full py-16\">\n\n                    <Fade>\n                        <h3 className=\"font-bold text-5xl text-blue-900 text-center mt-6 mb-12\">la Semaine De l'Innovation</h3>\n                    </Fade>\n\n                    <Zoom>\n                        <p className=\"mx-10 md:mx-24 lg:mx-48 text-xl text-center\">\n                            La <span className=\"text-blue-900 text-2xl font-bold\">S</span>emaine <span className=\"text-blue-900 text-2xl font-bold\">D</span>e l'<span className=\"text-blue-900 text-2xl font-bold\">I</span>nnovation (<span className=\"text-blue-900 text-2xl font-bold\">SDI</span>) est une semaine rÃ©servÃ©e Ã  la valorisation des innovations ivoiriennes et internaltionales dans les Technologies de l'Information et de la Communication.\n                        </p>\n                    </Zoom>\n\n                    <div className=\"grid grid-cols-2 gap-y-12 mt-12\">\n                        <div className=\"col-span-2 gap-x-12 flex flex-col md:flex-row justify-center items-center\">\n                            <Rotate top left>\n                                <div className=\"text-white bg-indigo-700 w-80 h-80 text-lg text-center flex items-center px-4 py-4 rounded-tl-full rounded-tr-full rounded-bl-full\">\n                                    <p>\n                                        <span className=\"font-bold text-2xl\">Objectif 1</span><br />Concentrer les regards de la ville d'Abidjan voir de toute la CÃ´te d'ivoire sur les TIC ainsi que sur l'ESATIC ses talentueux Ã©tudiants pendant une semaine\n                                    </p>\n                                </div>\n                            </Rotate>\n                            <Rotate top right>\n                                <div className=\"text-white bg-blue-600 w-80 h-80 text-lg text-center flex items-center px-4 py-4 rounded-tl-full rounded-tr-full rounded-br-full mt-12 md:mt-0\">\n                                    <p>\n                                        <span className=\"font-bold text-2xl\">Objectif 2</span><br /> Atteindre 1000 tapage participants (Ã©tudiants, lycÃ©ens, collÃ©giens, professionnels du domaine des TIC, personnalitÃ©s)\n                                    </p>\n                                </div>\n                            </Rotate>\n                        </div>\n                        <div className=\"col-span-2 gap-x-12 flex flex-col md:flex-row justify-center items-center\">\n                            <Rotate bottom left>\n                                <div className=\"text-white bg-blue-900 w-80 h-80 text-lg text-center flex items-center px-4 py-4 rounded-tl-full rounded-br-full rounded-bl-full\">\n                                    <p>\n                                        <span className=\"font-bold text-2xl\">Objectif 3</span><br />Promouvoir l'utilisation des TIC Ã  bon escient en CÃ´te d'Ivoire\n                                    </p>\n                                </div>\n                            </Rotate>\n                            <Rotate bottom right>\n                                <div className=\"text-white bg-gray-900 w-80 h-80 text-lg text-center flex items-center px-4 py-4 rounded-br-full rounded-tr-full rounded-bl-full mt-12 md:mt-0\">\n                                    <p>\n                                        <span className=\"font-bold text-2xl\">Objectif 4</span><br />Montrer les talents dont dispose la Cote d'Ivoire au niveau des TIC\n                                    </p>\n                                </div>\n                            </Rotate>\n                        </div>\n                    </div>\n                </div>\n\n\n                <div className=\"grid gap-4 w-full py-16\" style={{ backgroundImage: `url(${backPage})`, backgroundBlendMode: \"multiply\", backgroundPosition: \"center center\", backgroundAttachment: \"fixed\" }}>\n\n                    <Fade>\n                        <h3 className=\"font-bold text-5xl text-white text-center mt-6 mb-12\">Trois activitÃ©s majeures</h3>\n                    </Fade>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-y-6 mt-12\">\n\n                        <Fade left>\n                            <div className=\"flex flex-col text-white text-xl flex rounded-lg mx-4 shadow-xl-white\" style={{ backgroundImage: `url(${coding})`, backgroundPosition: \"center center\", }}>\n                                <div className=\"px-5 py-5 h-full rounded-lg\" style={{ backgroundColor: \"rgba(0, 0, 0, 0.75)\" }}>\n                                    <h3 className=\"font-bold text-2xl mb-7\">\n                                        Technovore-Hackathon\n                                    </h3>\n                                    <p>\n                                        Ce sont 72 heures intenses de Â« coding Â», au cours desquelles plusieurs Ã©quipes de trois (3) personnes ou moins oeuvrent Ã  trouver des solutionsinnovantes Ã  plusieurs problÃ¨mes.\n                                    </p>\n                                </div>\n                            </div>\n                        </Fade>\n                        <Fade bottom>\n                            <div className=\"flex flex-col text-white text-xl flex rounded-lg mx-4 shadow-xl-white\" style={{ backgroundImage: `url(${bToB})`, backgroundPosition: \"center center\" }}>\n                                <div className=\"px-5 py-5 h-full rounded-lg\" style={{ backgroundColor: \"rgba(0, 0, 0, 0.75)\" }}>\n                                    <h3 className=\"font-bold text-2xl mb-7\">\n                                        Salon de l'innovation\n                                    </h3>\n                                    <p>\n                                        Le Salon de l'Innovation (SI) est un cadre dÃ©diÃ© aux entreprises, particuliers et Ã©tudiants pour prÃ©senter des projets ou produits innovants en rapport avec les TIC. Les participants pourront donc avoir des Ã©changes B to B avec les visiteurs.\n                                    </p>\n                                </div>\n                            </div>\n                        </Fade>\n                        <Fade right>\n                            <div className=\"flex flex-col text-white text-xl flex rounded-lg mx-4 shadow-xl-white\" style={{ backgroundImage: `url(${ict_students})`, backgroundPosition: \"center center\" }}>\n                                <div className=\"px-5 py-5 h-full rounded-lg\" style={{ backgroundColor: \"rgba(0, 0, 0, 0.75)\" }}>\n                                    <h3 className=\"font-bold text-2xl mb-7\">\n                                        JETIC\n                                    </h3>\n                                    <p>\n                                        La JournÃ©e de l'Etudiant en Technologie de l'Information et de la Communication (JETIC) est une journÃ©e portes-ouvertes initiÃ©e par le C2E en 2017 et visant Ã  promouvoir des mÃ©tiers liÃ©s aux TIC.\n                                    </p>\n                                </div>\n                            </div>\n                        </Fade>\n                    </div>\n\n\n                </div>\n\n\n\n\n\n                <div className=\"grid gap-4 w-full py-16\">\n\n                    <Fade>\n                        <h3 className=\"font-bold text-5xl text-blue-900 text-center mt-6 mb-12\">Gadgets</h3>\n                    </Fade>\n\n                    <div className=\"grid grid-cols-1 gap-y-6\">\n                        <p className=\"font-semibold text-center text-blue-900\">\n                            Nos gadgets seront disponible trÃ¨s prochainement\n                        </p>\n                    </div>\n\n\n                </div>\n\n\n\n\n                {\n                    /*\n                <div className=\"grid gap-4 w-full py-16\">\n\n                    <Fade>\n                        <h3 className=\"font-bold text-5xl text-blue-900 text-center mt-6 mb-12\">La derniÃ¨re Ã©dition en images</h3>\n                    </Fade>\n\n                    <div className=\"grid grid-cols-1 gap-y-6\">\n\n                        <Swiper\n                            tag=\"section\"\n                            wrapperTag=\"ul\"\n                            navigation\n                            pagination\n                            spaceBetween={50}\n                            slidesPerView={3}\n                            onSlideChange={() => console.log('slide change')}\n                            onSwiper={(swiper) => console.log(swiper)}\n                        >\n                            {\n                                galleryImgs.map((img, ind) => (\n                                    <SwiperSlide key={`slide-${ind}`} tag=\"li\">\n                                        <img src={img} alt={`slide-${ind}`}\n                                            style={{listStyle:\"none\"}}\n                                        />\n                                    </SwiperSlide>\n                                ))\n                            }\n                        </Swiper>\n\n                    </div>\n\n\n                </div>\n                    */\n                }\n\n            </div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            {\n                //  Pop-up pour confirmation de prÃ©sence\n                popUpDeconnexion &&\n                <Modal isOpen={popUpDeconnexion} toggle={setPopUpDeconnexion} transparent small darkModal>\n                    <p className=\"flex items-center my-4\">\n                        <FontAwesomeIcon icon={faWindowClose} size=\"4x\" className=\"mr-6\" color=\"green\" />\n                        <h3 className=\"text-2xl font-semibold\">\n                            Veuillez vous deconnecter d'abord\n                        </h3>\n                    </p>\n                </Modal>\n            }            \n            \n\n\n\n            {\n                //  Pop-up pour professionnels\n                modalProf &&\n                <Modal title=\"Espace Professionnel\" isOpen={modalProf} toggle={setModalProf} transparent darkModal>\n                    {\n                        connexion\n                            ?\n                            <Formik\n                                initialValues={{\n                                    email: '',\n                                    password: '',\n                                }}\n\n                                validationSchema={Yup.object({\n                                    email: Yup.string()\n                                        .email('Adresse Ã©lectronique invalide')\n                                        .required('Ce champ est requis'),\n                                    password: Yup.string()\n                                        .required('Ce champ est requis')\n                                })}\n\n                                onSubmit={(values, { setSubmitting }) => {\n                                    console.log(values);\n                                    console.log(setSubmitting);\n\n                                    fetch(api_url + \"/prof/getProfessionnelsByEmail\", {\n                                        \"method\": \"POST\",\n                                        \"headers\": {\n                                            \"content-type\": \"application/json\"\n                                        },\n                                        \"body\": JSON.stringify(values)\n                                    })\n                                        .then(response => response.json())\n                                        .then(response => {\n\n                                            if (response.success) {\n                                                response.data._doc[\"profil\"] = \"professionnel\"\n                                                setSession(response.data._doc)\n                                                window.location.pathname = \"espace_professionnel\"\n                                            } else {\n                                                let new_erreur = erreur\n                                                new_erreur[\"connexion\"] = true\n                                                setErreur(new_erreur)\n                                            }\n                                        })\n                                        .catch(err => {\n                                            let new_erreur = erreur\n                                            new_erreur[\"connexion\"] = true\n                                            setErreur(new_erreur)\n                                        });\n                                }}\n                            >\n                                <Form>\n\n                                    {\n                                        success.prof &&\n                                        <div className=\"my-4 text-center text-green-600\">\n                                            L'enregistrement a Ã©tÃ© un success\n                                        </div>\n                                    }\n\n                                    {\n                                        erreur.connexion &&\n                                        <div className=\"my-4 text-center text-red-600\">\n                                            Les identifiants sont incorrects\n                                        </div>\n                                    }\n\n                                    <MyTextInput\n                                        label=\"Adresse mail\"\n                                        name=\"email\"\n                                        type=\"email\"\n                                        placeholder=\"sammy.bini@gmail.com\"\n                                    />\n\n                                    <MyTextInput\n                                        label=\"Mot de passe\"\n                                        name=\"password\"\n                                        type=\"password\"\n                                    />\n\n                                    <p className=\"text-center text-xs text-blue-900 cursor-pointer italic\">\n                                        Mot de passe oubliÃ© ?\n                                        </p>\n\n                                    <div className=\"flex justify-between pt-2\">\n                                        <InputButtonLight onClick={() => {\n                                            setConnexion(false)\n                                        }} name=\"cas\" type=\"submit\" value=\"S'inscrire\" />\n                                        <InputButtonDark type=\"submit\" value=\"Se connecter\" />\n                                    </div>\n                                </Form>\n                            </Formik>\n                            :\n                            <Formik\n\n                                initialValues={{\n                                    \"raison_sociale\": \"\",\n                                    \"interlocuteur\": \"\",\n                                    \"localisation\": \"\",\n                                    \"contact\": \"\",\n                                    \"email\": \"\",\n                                    \"password\": \"\",\n                                    \"cpassword\": \"\"\n                                }}\n\n                                validationSchema={Yup.object({\n                                    raison_sociale: Yup.string(),\n                                    interlocuteur: Yup.string()\n                                        .required('Ce champ est requis'),\n                                    localisation: Yup.string()\n                                        .required('Ce champ est requis'),\n                                    contact: Yup.string()\n                                        .required('Ce champ est requis')\n                                        .matches(phoneRegExp, 'Le numÃ©ro de tÃ©lÃ©phone est invalide'),\n                                    email: Yup.string()\n                                        .email('Adresse Ã©lectronique invalide')\n                                        .required('Ce champ est requis'),\n                                    password: Yup.string()\n                                        .required('Ce champ est requis'),\n                                    cpassword: Yup.string()\n                                        .oneOf([Yup.ref('password'), null], \"Veuillez entrer le mÃªme mot de passe\")\n\n                                })}\n\n                                onSubmit={(values, { setSubmitting }) => {\n                                    console.log(\"Soumission\");\n                                    console.log(values);\n\n                                    fetch(api_url + \"/prof/insertProfessionnels\", {\n                                        \"method\": \"POST\",\n                                        \"headers\": {\n                                            \"content-type\": \"application/json\"\n                                        },\n                                        \"body\": JSON.stringify(values)\n                                    })\n                                        .then(response => response.json())\n                                        .then(response => {\n\n                                            console.log(\"RÃ©ponse\");\n                                            console.log(response);\n\n                                            if (response.success) {\n                                                let new_success = success\n                                                new_success[\"prof\"] = true\n                                                setSuccess(new_success)\n                                                setConnexion(true)\n\n                                                let new_erreur = erreur\n                                                new_erreur[\"prof\"] = false\n                                                setErreur(new_erreur)\n\n                                            } else {\n                                                let new_erreur = erreur\n                                                new_erreur[\"prof\"] = true\n                                                setErreur(new_erreur)\n                                            }\n                                        })\n                                        .catch(err => {\n                                            let new_erreur = erreur\n                                            new_erreur[\"prof\"] = true\n                                            setErreur(new_erreur)\n                                        });\n\n                                }}\n                            >\n                                <Form>\n\n                                    <MyTextInput\n                                        label=\"Raison sociale\"\n                                        name=\"raison_sociale\"\n                                        type=\"text\"\n                                    />\n                                    <MyTextInput\n                                        label=\"Interlocuteur\"\n                                        name=\"interlocuteur\"\n                                        type=\"text\"\n                                    />\n                                    <MyTextInput\n                                        label=\"Localisation\"\n                                        name=\"localisation\"\n                                        type=\"text\"\n                                    />\n                                    <MyTextInput\n                                        label=\"Contact\"\n                                        name=\"contact\"\n                                        type=\"tel\"\n                                    />\n                                    <MyTextInput\n                                        label=\"Adresse mail\"\n                                        name=\"email\"\n                                        type=\"email\"\n                                        placeholder=\"sammy.bini@gmail.com\"\n                                    />\n                                    <MyTextInput\n                                        label=\"Mot de passe\"\n                                        name=\"password\"\n                                        type=\"password\"\n                                    />\n                                    <MyTextInput\n                                        label=\"Confirmation du mot de passe\"\n                                        name=\"cpassword\"\n                                        type=\"password\"\n                                    />\n\n                                    {\n                                        erreur[\"prof\"] &&\n                                        <div className=\"text-red-500 text-center\">\n                                            Une erreur s'est produite pendant l'enregistrement\n                                        </div>\n                                    }\n\n                                    <div className=\"flex justify-between pt-2\">\n                                        <InputButtonLight onClick={() => {\n                                            setConnexion(true)\n                                        }} name=\"cas\" type=\"submit\" value=\"Se connecter\" />\n                                        <InputButtonDark type=\"submit\" value=\"S'inscrire\" />\n                                    </div>\n                                </Form>\n                            </Formik>\n                    }\n                </Modal>\n            }\n\n\n\n\n            {\n                //  Pop-up pour Ã©tudiants\n                modalStudent &&\n                <Modal title=\"Espace Etudiants\" isOpen={modalStudent} toggle={setModalStudent} transparent darkModal>\n                    {\n                        connexion\n                            ?\n                            <Formik\n                                initialValues={{\n                                    email: '',\n                                    password: '',\n                                }}\n\n                                validationSchema={Yup.object({\n                                    email: Yup.string()\n                                        .required('Ce champ est requis'),\n                                    password: Yup.string()\n                                        .required('Ce champ est requis')\n                                })}\n\n                                onSubmit={(values, { setSubmitting }) => {\n                                    console.log(values);\n                                    console.log(setSubmitting);\n\n                                    fetch(api_url + \"/etudiant/getEtudiantByEmail\", {\n                                        \"method\": \"POST\",\n                                        \"headers\": {\n                                            \"content-type\": \"application/json\"\n                                        },\n                                        \"body\": JSON.stringify(values)\n                                    })\n                                        .then(response => response.json())\n                                        .then(response => {\n\n                                            if (response.success && response.data) {\n                                                response.data._doc[\"profil\"] = \"etudiant\"\n                                                setSession(response.data._doc)\n                                                window.location.pathname = \"espace_etudiant\"\n                                            } else {\n                                                let new_erreur = erreur\n                                                new_erreur[\"connexion\"] = true\n                                                setErreur(new_erreur)\n                                            }\n                                        })\n                                        .catch(err => {\n                                            let new_erreur = erreur\n                                            new_erreur[\"connexion\"] = true\n                                            setErreur(new_erreur)\n                                        });\n                                }}\n                            >\n                                <Form>\n\n                                    {\n                                        success.etudiant &&\n                                        <div className=\"my-4 text-center text-green-600\">\n                                            L'enregistrement a Ã©tÃ© un success\n                                        </div>\n                                    }\n\n                                    {\n                                        erreur.connexion &&\n                                        <div className=\"my-4 text-center text-red-600\">\n                                            Les identifiants sont incorrects\n                                        </div>\n                                    }\n\n                                    <MyTextInput\n                                        label=\"E-mail\"\n                                        name=\"email\"\n                                        type=\"email\"\n                                        placeholder=\"sammy.bini@gmail.com\"\n                                    />\n                                    <MyTextInput\n                                        label=\"Mot de passe\"\n                                        name=\"password\"\n                                        type=\"password\"\n                                    />\n\n                                    <p className=\"text-center text-xs text-blue-900 cursor-pointer italic\">\n                                        Mot de passe oubliÃ© ?\n                                    </p>\n\n                                    <div className=\"flex justify-between pt-2\">\n                                        <InputButtonLight onClick={() => {\n                                            setConnexion(false)\n                                        }} name=\"cas\" type=\"submit\" value=\"S'inscrire\" />\n                                        <InputButtonDark type=\"submit\" value=\"Se connecter\" />\n                                    </div>\n                                </Form>\n                            </Formik>\n                            :\n                            <Formik\n\n                                initialValues={{\n                                    \"nom\": \"\",\n                                    \"prenoms\": \"\",\n                                    \"email\": \"\",\n                                    \"matricule\": \"\",\n                                    \"classe\": \"\",\n                                    \"contact\": \"\",\n                                    \"password\": \"\",\n                                    \"cpassword\": \"\"\n                                }}\n\n                                validationSchema={Yup.object({\n                                    nom: Yup.string()\n                                        .required(\"Ce champ est requis\"),\n                                    prenoms: Yup.string()\n                                        .required(\"Ce champ est requis\"),\n                                    email: Yup.string()\n                                        .email('Adresse Ã©lectronique invalide')\n                                        .required('Ce champ est requis'),\n                                    matricule: Yup.string()\n                                        .required(\"Ce champ est requis\"),\n                                    classe: Yup.string()\n                                        .required(\"Ce champ est requis\"),\n                                    contact: Yup.string()\n                                        .required(\"Ce champ est requis\")\n                                        .matches(phoneRegExp, 'Le numÃ©ro de tÃ©lÃ©phone est invalide'),\n                                    password: Yup.string()\n                                        .required(\"Ce champ est requis\"),\n                                    cpassword: Yup.string()\n                                        .oneOf([Yup.ref('password'), null], \"Veuillez entrer le mÃªme mot de passe\")\n\n                                })}\n\n                                onSubmit={(values, { setSubmitting }) => {\n                                    console.log(\"Soumission\");\n                                    console.log(values);\n\n                                    fetch(api_url + \"/etudiant/insertEtudiant\", {\n                                        \"method\": \"POST\",\n                                        \"headers\": {\n                                            \"content-type\": \"application/json\"\n                                        },\n                                        \"body\": JSON.stringify(values)\n                                    })\n                                        .then(response => response.json())\n                                        .then(response => {\n\n                                            console.log(\"RÃ©ponse\");\n                                            console.log(response);\n\n                                            if (response.success) {\n                                                let new_success = success\n                                                new_success[\"etudiant\"] = true\n                                                setSuccess(new_success)\n                                                setConnexion(true)\n\n                                                let new_erreur = erreur\n                                                new_erreur[\"etudiant\"] = false\n                                                setErreur(new_erreur)\n\n                                            } else {\n                                                let new_erreur = erreur\n                                                new_erreur[\"etudiant\"] = true\n                                                setErreur(new_erreur)\n                                            }\n                                        })\n                                        .catch(err => {\n                                            let new_erreur = erreur\n                                            new_erreur[\"etudiant\"] = true\n                                            setErreur(new_erreur)\n                                        });\n\n                                }}\n                            >\n                                <Form>\n                                    <MyTextInput\n                                        label=\"Nom\"\n                                        name=\"nom\"\n                                        type=\"text\"\n                                    />\n                                    <MyTextInput\n                                        label=\"PrÃ©noms\"\n                                        name=\"prenoms\"\n                                        type=\"text\"\n                                    />\n                                    <MyTextInput\n                                        label=\"E-mail\"\n                                        name=\"email\"\n                                        type=\"email\"\n                                    />\n                                    <MyTextInput\n                                        label=\"Matricule\"\n                                        name=\"matricule\"\n                                        type=\"text\"\n                                    />\n                                    <MyTextInput\n                                        label=\"Classe\"\n                                        name=\"classe\"\n                                        type=\"text\"\n                                    />\n                                    <MyTextInput\n                                        label=\"Contact\"\n                                        name=\"contact\"\n                                        type=\"tel\"\n                                    />\n                                    <MyTextInput\n                                        label=\"Mot de passe\"\n                                        name=\"password\"\n                                        type=\"password\"\n                                    />\n                                    <MyTextInput\n                                        label=\"Confirmation du mot de passe\"\n                                        name=\"cpassword\"\n                                        type=\"password\"\n                                    />\n\n                                    {\n                                        erreur[\"etudiant\"] &&\n                                        <div className=\"text-red-500 text-center\">\n                                            Une erreur s'est produite pendant l'enregistrement\n                                        </div>\n                                    }\n                                    <div className=\"flex justify-between pt-2\">\n                                        <InputButtonLight onClick={() => {\n                                            setConnexion(true)\n                                        }} name=\"cas\" type=\"submit\" value=\"Se connecter\" />\n                                        <InputButtonDark type=\"submit\" value=\"S'inscrire\" />\n                                    </div>\n                                </Form>\n                            </Formik>\n                    }\n                </Modal>\n            }\n\n\n\n            {\n                //  Pop-up pour Ã©lÃ¨ves\n                modalSchool &&\n                <Modal title=\"Espace Ecole\" isOpen={modalSchool} toggle={setModalSchool} transparent darkModal>\n                    {\n                        connexion\n                            ?\n                            <Formik\n                                initialValues={{\n                                    identifiant: '',\n                                    password: '',\n                                }}\n\n                                validationSchema={Yup.object({\n                                    identifiant: Yup.string()\n                                        .required('Ce champ est requis'),\n                                    password: Yup.string()\n                                        .required('Ce champ est requis')\n                                })}\n\n                                onSubmit={(values, { setSubmitting }) => {\n                                    console.log(values);\n                                    console.log(setSubmitting);\n                                    //  setSubmitting(false);\n                                    //  setModalProf(false)\n                                }}\n                            >\n                                <Form>\n                                    <MyTextInput\n                                        label=\"Identifiant\"\n                                        name=\"identifiant\"\n                                        type=\"text\"\n                                    />\n\n                                    <MyTextInput\n                                        label=\"Mot de passe\"\n                                        name=\"password\"\n                                        type=\"password\"\n                                    />\n\n                                    <p className=\"text-center text-xs text-blue-900 cursor-pointer italic\">\n                                        Mot de passe oubliÃ© ?\n                                    </p>\n\n                                    <div className=\"flex justify-between pt-2\">\n                                        <InputButtonLight onClick={() => {\n                                            setConnexion(false)\n                                        }} name=\"cas\" type=\"submit\" value=\"S'inscrire\" />\n                                        <InputButtonDark type=\"submit\" value=\"Se connecter\" />\n                                    </div>\n                                </Form>\n                            </Formik>\n                            :\n                            <Formik\n\n                                validationSchema={Yup.object({\n                                    interlocuteur: Yup.string()\n                                        .required('Ce champ est requis'),\n                                    contact: Yup.string()\n                                        .required('Ce champ est requis')\n                                        .matches(phoneRegExp, 'Le numÃ©ro de tÃ©lÃ©phone est invalide'),\n                                    email: Yup.string()\n                                        .email('Adresse Ã©lectronique invalide')\n                                        .required('Ce champ est requis'),\n                                    password: Yup.string()\n                                        .required('Ce champ est requis'),\n                                    cpassword: Yup.string()\n                                        .oneOf([Yup.ref('password'), null], \"Veuillez entrer le mÃªme mot de passe\")\n\n                                })}\n\n                                onSubmit={(values, { setSubmitting }) => {\n                                    console.log(values);\n                                    //  setSubmitting(false);\n                                    //  setModalProf(false)\n                                }}\n                            >\n                                <Form>\n                                    <MyTextInput\n                                        label=\"Etablissement\"\n                                        name=\"etablissement\"\n                                        type=\"text\"\n                                        placeholder=\"LycÃ©e garÃ§ons de Bingerville\"\n                                    />\n                                    <MyTextInput\n                                        label=\"Interlocuteur\"\n                                        name=\"interlocuteur\"\n                                        type=\"text\"\n                                        placeholder=\"Bini Samuel\"\n                                    />\n                                    <MyTextInput\n                                        label=\"Contact\"\n                                        name=\"contact\"\n                                        type=\"tel\"\n                                        placeholder=\"89990640\"\n                                    />\n                                    <MyTextInput\n                                        label=\"Adresse mail\"\n                                        name=\"email\"\n                                        type=\"email\"\n                                        placeholder=\"sammy.bini@gmail.com\"\n                                    />\n                                    <MyTextInput\n                                        label=\"Mot de passe\"\n                                        name=\"password\"\n                                        type=\"password\"\n                                    />\n                                    <MyTextInput\n                                        label=\"Confirmation du mot de passe\"\n                                        name=\"cpassword\"\n                                        type=\"password\"\n                                    />\n\n                                    <div className=\"flex justify-between pt-2\">\n                                        <InputButtonLight onClick={() => {\n                                            setConnexion(true)\n                                        }} name=\"cas\" type=\"submit\" value=\"Se connecter\" />\n                                        <InputButtonDark type=\"submit\" value=\"S'inscrire\" />\n                                    </div>\n                                </Form>\n                            </Formik>\n                    }\n                </Modal>\n            }\n\n\n        </div >\n    )\n}\n","/home/onyx/Documents/DEV/ReactJS/sdi/src/components/utils/Modal.jsx",[],"/home/onyx/Documents/DEV/ReactJS/sdi/src/components/Form/index.jsx",[],"/home/onyx/Documents/DEV/ReactJS/sdi/src/components/Form/MyTextInput.jsx",[],"/home/onyx/Documents/DEV/ReactJS/sdi/src/components/Form/MyCheckbox.jsx",[],"/home/onyx/Documents/DEV/ReactJS/sdi/src/components/Form/MySelect.jsx",["78"],"import React, { Children } from 'react'\nimport { useField } from 'formik'\n\nexport default function MySelect({ label, children, ...props }) {\n    const [field, meta] = useField(props);\n\n    return (\n        <div className=\"m-4\">\n            <label className=\"block text-sm text-blue-900\" htmlFor={props.id || props.name}>{label}</label>\n            <select id={props.id} name={props.id || props.name} className={\"w-full px-5 py-1 text-blue-900 font-semibold rounded focus:outline-none \" + ((meta.touched && meta.error) ? \" bg-red-100 \" : \" bg-blue-100 \")} {...field} {...props} >\n                { children }\n            </select>\n\n\n            {\n                meta.touched && meta.error ?\n                    (\n                        <p className=\"text-red-600 text-xs italic\">{meta.error}</p>\n                    )\n                    : null\n            }\n        </div>\n    )\n}\n","/home/onyx/Documents/DEV/ReactJS/sdi/src/components/Form/Buttons.jsx",[],"/home/onyx/Documents/DEV/ReactJS/sdi/src/constants/index.js",[],"/home/onyx/Documents/DEV/ReactJS/sdi/src/components/EspaceProfessionnel.jsx",["79","80"],"import React, {\n    useState,\n    useEffect\n} from 'react'\n\nimport * as Yup from 'yup';\nimport { phoneRegExp } from '../constants'\n\nimport { api_url } from '../constants';\n\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChalkboardTeacher } from '@fortawesome/free-solid-svg-icons'\nimport { faCheckCircle } from '@fortawesome/free-solid-svg-icons'\nimport { faWindowClose } from '@fortawesome/free-solid-svg-icons'\n\n\nimport Navbar from './Navbar';\nimport AccountItems from './AccountItems';\n\n\nimport Modal from './utils/Modal'\n\n\nimport { Formik, Form } from 'formik';\nimport { MyTextInput, ButtonLight, ButtonDark, InputButtonDark } from './Form';\n\n\nimport '../assets/css/families.css';\nimport bienvenue_a_l_esatic from '../assets/imgs/bienvenue_a_l_esatic.jpg';\n\n\nexport default function EspaceProfessionnel({ session, setSession }) {\n\n    const [presence, setPresence] = useState(false)\n    const [confirmation, setConfirmation] = useState(session.present)\n    const [annulation, setAnnulation] = useState(false)\n    const [modification, setModification] = useState(false)\n    const [erreur, setErreur] = useState(false)\n\n\n\n    return (\n        <div style={{ backgroundImage: `url(${bienvenue_a_l_esatic})`, backgroundSize: \"cover\", minHeight: \"100vh\", backgroundAttachment: \"fixed\" }}>\n\n            <Navbar />\n\n            <div id=\"corps_espace_prof\" className=\"bg-white bg-opacity-80 pb-10\" style={{ minHeight: \"calc(100vh - 5rem)\" }}>\n                <h1 className=\"font-semibold lobster text-7xl ml-10 pt-8 text-gray-900\">\n                    Espace Professionnel\n                </h1>\n\n                <FontAwesomeIcon className=\"hidden md:block\" icon={faChalkboardTeacher} style={{ fontSize: \"500px\", opacity: \"0.6\", position: 'absolute', right: \"40px\" }} />\n\n                <section className=\"mt-16 ml-20 md:w-7/12 mb-16\">\n                    <AccountItems name=\"NÂ° du stand\" value={session.stand} />\n                    <AccountItems name=\"Raison sociale\" value={session.raison_sociale} />\n                    <AccountItems name=\"Interlocuteur\" value={session.interlocuteur} />\n                    <AccountItems name=\"Contact\" value={session.contact} />\n                    <AccountItems name=\"Adresse-mail\" value={session.email} />\n                </section>\n\n                <p className=\"md:w-7/12 text-gray-900 text-center mb-10 font-semibold\">\n                    Le Salon de l'Innovation (SI) aura lieu le Samedi 27 FÃ©vrier 2020 <br />\n                    Veuillez donc confirmer ou infirmer votre prÃ©sence\n                </p>\n\n                <div className=\"flex justify-center md:w-7/12\">\n                    {\n                        presence\n                            ?\n                            <button className=\"bg-red-600 py-2 px-4 text-white ml-20\" onClick={() => {\n\n                                fetch(api_url + \"/prof/presenceProfessionnel\", {\n                                    \"method\": \"POST\",\n                                    \"headers\": {\n                                        \"content-type\": \"application/json\"\n                                    },\n                                    \"body\": JSON.stringify({\n                                        email: session.email,\n                                        present: 0,\n                                    })\n                                })\n                                    .then(response => response.json())\n                                    .then(response => {\n\n                                        if (response.success) {\n                                            setAnnulation(true)\n                                            setPresence(false)\n                                        }\n                                    })\n                                    .catch(err => {\n                                        console.log(\"Il y a une erreur\");\n                                    });\n                            }}>\n                                Infirmer sa prÃ©sence\n                            </button>\n                            :\n                            <button className=\"bg-green-700 py-2 px-4 text-white ml-20\" onClick={() => {\n                                fetch(api_url + \"/prof/presenceProfessionnel\", {\n                                    \"method\": \"POST\",\n                                    \"headers\": {\n                                        \"content-type\": \"application/json\"\n                                    },\n                                    \"body\": JSON.stringify({\n                                        email: session.email,\n                                        present: 1,\n                                    })\n                                })\n                                    .then(response => response.json())\n                                    .then(response => {\n\n                                        if (response.success) {\n                                            setConfirmation(true)\n                                            setPresence(true)\n                                        }\n                                    })\n                                    .catch(err => {\n                                        console.log(\"Il y a une erreur\");\n                                    });\n                            }}>\n                                Confimer sa prÃ©sence\n                            </button>\n                    }\n\n                    <button className=\"bg-gray-900 py-2 px-4 text-white ml-20\" onClick={() => {\n                        setModification(true)\n                    }}>\n                        Modifier ses informations\n                    </button>\n                </div>\n\n            </div>\n\n\n\n\n\n\n            {\n                //  Pop-up pour confirmation de prÃ©sence\n                (confirmation && !annulation) &&\n                <Modal isOpen={confirmation} toggle={setConfirmation} transparent small darkModal>\n                    <p className=\"flex items-center my-4\">\n                        <FontAwesomeIcon icon={faCheckCircle} size=\"4x\" className=\"mr-6\" color=\"green\" />\n                        <h3 className=\"text-2xl font-semibold\">\n                            PrÃ©sence confirmÃ©e\n                        </h3>\n                    </p>\n                </Modal>\n            }\n\n\n\n            {\n                //  Pop-up pour infirmation de prÃ©sence\n                (annulation && !confirmation) &&\n                <Modal isOpen={annulation} toggle={setAnnulation} transparent small darkModal>\n                    <p className=\"flex items-center my-4\">\n                        <FontAwesomeIcon icon={faWindowClose} size=\"4x\" className=\"mr-6\" color=\"red\" />\n                        <h3 className=\"text-2xl font-semibold\">\n                            PrÃ©sence annulÃ©e\n                        </h3>\n                    </p>\n                </Modal>\n            }\n\n\n\n            {\n                //  Pop-up pour modification des infos\n                modification &&\n                <Modal title=\"Espace Professionnel\" isOpen={modification} toggle={setModification} transparent darkModal>\n                    {\n                        <Formik\n                            initialValues={{\n                                \"raison_sociale\": session.raison_sociale ? session.raison_sociale : \"\",\n                                \"interlocuteur\": session.interlocuteur ? session.interlocuteur : \"\",\n                                \"contact\": session.contact ? session.contact : \"\",\n                                \"email\": session.email ? session.email : \"\"\n                            }}\n\n                            validationSchema={Yup.object({\n                                raison_sociale: Yup.string(),\n                                interlocuteur: Yup.string(),\n                                contact: Yup.string()\n                                    .matches(phoneRegExp, 'Le numÃ©ro de tÃ©lÃ©phone est invalide'),\n                                email: Yup.string()\n                                    .email('Adresse Ã©lectronique invalide'),\n                            })}\n\n                            onSubmit={(values) => {\n\n                                fetch(api_url + \"/prof/UpdateProfessionnel\", {\n                                    \"method\": \"POST\",\n                                    \"headers\": {\n                                        \"content-type\": \"application/json\"\n                                    },\n                                    \"body\": JSON.stringify({\n                                        old_email: session.email,\n                                        ...values\n                                    })\n                                })\n                                    .then(response => response.json())\n                                    .then(response => {\n                                        if (response.success) {\n                                            for (let [key, value] of Object.entries(values)) {\n                                                session[`${key}`] = value\n                                            }\n                                            console.log(session)    \n                                            setErreur(false)\n                                            setSession(session)\n                                            setModification(false)\n                                        } else {\n                                            setErreur(true)\n                                        }\n                                    })\n                                    .catch(err => {\n                                        setErreur(true)\n                                        console.log(err);\n                                    });\n\n                            }}\n                        >\n                            <Form>\n\n                                {\n                                    erreur &&\n                                    <p className=\"text-red-600 text-center\">\n                                        Une erreur est survenue\n                                    </p>\n                                }\n                                <MyTextInput\n                                    label=\"Raison sociale\"\n                                    name=\"raison_sociale\"\n                                    type=\"text\"\n                                />\n                                <MyTextInput\n                                    label=\"Interlocuteur\"\n                                    name=\"interlocuteur\"\n                                    type=\"text\"\n                                />\n                                <MyTextInput\n                                    label=\"Contact\"\n                                    name=\"contact\"\n                                    type=\"tel\"\n                                />\n                                <MyTextInput\n                                    label=\"Adresse mail\"\n                                    name=\"email\"\n                                    type=\"email\"\n                                    placeholder=\"sammy.bini@gmail.com\"\n                                />\n\n                                <div className=\"flex justify-around\">\n                                    <div className=\"flex justify-between pt-2\">\n                                        <ButtonLight value=\"Annuler\" onClick={() => {\n                                            setModification(false)\n                                        }}>\n                                            Annuler\n                                        </ButtonLight>\n                                    </div>\n                                    <div className=\"flex justify-between pt-2\">\n                                        <InputButtonDark type=\"submit\" value=\"Valider\" />\n                                    </div>\n\n                                </div>\n                            </Form>\n                        </Formik>\n                    }\n                </Modal>\n            }\n\n\n\n\n        </div>\n    )\n}\n","/home/onyx/Documents/DEV/ReactJS/sdi/src/components/EspaceEtudiant.jsx",["81","82"],"import React, {\n    useState\n} from 'react'\n\nimport * as Yup from 'yup';\nimport { phoneRegExp } from '../constants'\n\nimport { api_url } from '../constants';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faUserGraduate, faCheckCircle } from '@fortawesome/free-solid-svg-icons'\n\nimport Navbar from './Navbar';\nimport AccountItems from './AccountItems';\n\n\nimport Modal from './utils/Modal'\n\n\nimport { Formik, Form } from 'formik';\nimport { MyTextInput, MyTextArea, ButtonLight, InputButtonDark, MySelect, MyCheckbox } from './Form';\n\n\nimport '../assets/css/families.css';\nimport bienvenue_a_l_esatic from '../assets/imgs/bienvenue_a_l_esatic.jpg';\n\n\nexport default function EspaceEtudiant({ session, setSession }) {\n\n    const [participationHack, setParticipationHack] = useState(false)\n    const [participationJetic, setParticipationJetic] = useState(false)\n    const [jeticErreur, setJeticErreur] = useState(false)\n    const [hackErreur, setHackErreur] = useState(false)\n    const [popUpJetic, setPopUpJetic] = useState(false)\n    const [popUpHack, setPopUpHack] = useState(false)\n\n\n\n    return (\n        <div style={{ backgroundImage: `url(${bienvenue_a_l_esatic})`, backgroundSize: \"cover\", minHeight: \"100vh\", backgroundAttachment: \"fixed\" }}>\n\n            <Navbar />\n\n            <div id=\"corps_espace_prof\" className=\"bg-white bg-opacity-80 pb-10\" style={{ minHeight: \"calc(100vh - 5rem)\" }}>\n                <h1 className=\"font-semibold lobster text-7xl ml-10 pt-8 text-gray-900\">\n                    Espace Etudiant\n                </h1>\n\n                <FontAwesomeIcon className=\"hidden md:block\" icon={faUserGraduate} style={{ fontSize: \"500px\", opacity: \"0.6\", position: 'absolute', right: \"40px\" }} />\n\n\n                <section className=\"mt-16 ml-20 md:w-7/12 mb-16\">\n                    <AccountItems name=\"Identifiant\" value={session.identifiant} />\n                    <AccountItems name=\"Nom\" value={session.nom} />\n                    <AccountItems name=\"PrÃ©noms\" value={session.prenoms} />\n                    <AccountItems name=\"Classe\" value={session.classe} />\n                    <AccountItems name=\"Contact\" value={session.contact} />\n                    <AccountItems name=\"Adresse-mail\" value={session.email} />\n                </section>\n\n\n                <p className=\"md:w-7/12 text-gray-900 text-center mb-10 font-semibold\">\n                    La Semaine De l'Innovation (SDI) aura lieu du Jeudi 25 FÃ©vrier au Lundi 1er Mars 2020. <br />\n                    Vous pouvez participer Ã  la JETIC ou au trÃ¨s reputÃ© Technovore Hackathon\n                </p>\n\n                <div className=\"flex justify-around md:w-7/12\">\n\n                    <button className=\"bg-gray-900 py-2 px-4 text-white\" onClick={() => {\n                        setParticipationHack(true)\n                    }}>\n                        <span>Participer au Hackathon</span>\n                    </button>\n\n                    <button className=\"bg-gray-900 py-2 px-4 text-white\" onClick={() => {\n                        setParticipationJetic(true)\n                    }}>\n                        <span>Participer Ã  la JETIC</span>\n                    </button>\n                </div>\n\n            </div>\n\n\n\n\n\n            {\n                //  Pop-up pour confirmation de prÃ©sence\n                popUpJetic &&\n                <Modal isOpen={popUpJetic} toggle={setPopUpJetic} transparent small darkModal>\n                    <p className=\"flex items-center my-4\">\n                        <FontAwesomeIcon icon={faCheckCircle} size=\"4x\" className=\"mr-6\" color=\"green\" />\n                        <h3 className=\"text-2xl font-semibold\">\n                            Inscription Ã  la JETIC validÃ©e\n                        </h3>\n                    </p>\n                </Modal>\n            }\n\n            {\n                //  Pop-up pour confirmation de prÃ©sence\n                popUpHack &&\n                <Modal isOpen={popUpHack} toggle={setPopUpHack} transparent small darkModal>\n                    <p className=\"flex items-center my-4\">\n                        <FontAwesomeIcon icon={faCheckCircle} size=\"4x\" className=\"mr-6\" color=\"green\" />\n                        <h3 className=\"text-2xl font-semibold\">\n                            Inscription au Hackathon validÃ©e\n                        </h3>\n                    </p>\n                </Modal>\n            }\n\n\n            {\n                //  Pop-up pour la participation au Hackathon\n                participationHack &&\n                <Modal title=\"Participation au Technovore Hackathon\" isOpen={setParticipationHack} toggle={setParticipationHack} transparent darkModal>\n                    {\n                        <Formik\n\n                            initialValues={{\n                                \"nom_equipe\": \"\",\n                                \"niveau_hack\": \"niveau_1\",\n                                \"branche_hack\": \"\",\n                                \"id_1_membre\": session.identifiant,\n                                \"id_2_membre\": \"SDI-E\",\n                                \"id_3_membre\": \"SDI-E\"\n                            }}\n\n                            validationSchema={Yup.object({\n                                nom_equipe: Yup\n                                    .string()\n                                    .required(\"Ce champ est requis\"),\n                                branche_hack: Yup\n                                    .string()\n                                    .required(\"Ce champ est requis\"),\n                                id_1_membre: Yup\n                                    .string(),\n                                id_2_membre: Yup\n                                    .string(),\n                                id_3_membre: Yup\n                                    .string(),\n                            })}\n\n                            onSubmit={(values) => {\n                                console.log(values);\n\n                                values.id_1_membre = session.identifiant\n\n                                fetch(api_url + \"/hack/insertParticipant\", {\n                                    \"method\": \"POST\",\n                                    \"headers\": {\n                                        \"content-type\": \"application/json\"\n                                    },\n                                    \"body\": JSON.stringify(values)\n                                })\n                                    .then(response => response.json())\n                                    .then(response => {\n\n                                        console.log(\"Res\");\n                                        console.log(response);\n\n                                        if (response.success) {\n                                            setParticipationHack(false)\n                                            setHackErreur(false)\n                                            setPopUpHack(true)\n                                        } else {\n                                            setJeticErreur(true)\n                                            console.error(response.erreur);\n                                        }\n                                    })\n                                    .catch(err => {\n                                        setJeticErreur(true)\n                                        console.log(err);\n                                    });\n                            }}\n                        >\n                            <Form>\n                                <MyTextInput\n                                    label=\"Nom de l'Ã©quipe\"\n                                    name=\"nom_equipe\"\n                                    type=\"text\"\n                                />\n                                <MySelect\n                                    label=\"Niveau\"\n                                    name=\"niveau_hack\"\n                                >\n                                    <option value=\"niveau_1\">Niveau 1</option>\n                                    <option value=\"niveau_2\">Niveau 2</option>\n                                    <option value=\"niveau_3\">Niveau 3</option>\n                                </MySelect>\n                                <MyTextInput\n                                    label=\"Domaine de prÃ©dilection\"\n                                    name=\"branche_hack\"\n                                    type=\"text\"\n                                    required={true}\n                                />\n                                <MyTextInput\n                                    label=\"Identifiant du 1er membre\"\n                                    name=\"id_1_membre\"\n                                    type=\"text\"\n                                    required={true}\n                                />\n                                <MyTextInput\n                                    label=\"Identifiant du 2nd membre\"\n                                    name=\"id_2_membre\"\n                                    type=\"text\"\n                                />\n                                <MyTextInput\n                                    label=\"Identifiant du 3eme membre\"\n                                    name=\"id_3_membre\"\n                                    type=\"text\"\n                                />\n\n\n                                {\n                                    hackErreur &&\n                                    <p className=\"text-center text-red-700 my-4\">\n                                        Une erreur est survenue\n                                    </p>\n                                }\n\n                                <div className=\"flex justify-around\">\n                                    <div className=\"flex justify-between pt-2\">\n                                        <ButtonLight value=\"Annuler\" onClick={() => {\n                                            setParticipationHack(false)\n                                        }}>\n                                            Annuler\n                                        </ButtonLight>\n                                    </div>\n                                    <div className=\"flex justify-between pt-2\">\n                                        <InputButtonDark type=\"submit\" value=\"Valider\" />\n                                    </div>\n                                </div>\n                            </Form>\n                        </Formik>\n                    }\n                </Modal>\n            }\n\n\n\n\n\n            {\n                //  Pop-up pour la participation Ã  la JETIC\n                participationJetic &&\n                <Modal title=\"Participation Ã  la JETIC\" isOpen={setParticipationJetic} toggle={setParticipationJetic} transparent darkModal>\n                    {\n                        <Formik\n                            initialValues={{\n                                \"titre_projet\": \"\",\n                                \"description_projet\": \"\",\n                                \"titre_tp\": \"\",\n                                \"description_tp\": \"\",\n                            }}\n\n                            validationSchema={Yup.object({\n                                titre_projet: Yup\n                                    .string(),\n                                description_projet: Yup\n                                    .string(),\n                                titre_tp: Yup\n                                    .string(),\n                                description_tp: Yup\n                                    .string()\n                            })}\n\n                            onSubmit={(values) => {\n                                console.log(values);\n\n                                values.etudiant = session.identifiant\n\n                                fetch(api_url + \"/jetic/insertJeticParticipant\", {\n                                    \"method\": \"POST\",\n                                    \"headers\": {\n                                        \"content-type\": \"application/json\"\n                                    },\n                                    \"body\": JSON.stringify(values)\n                                })\n                                    .then(response => response.json())\n                                    .then(response => {\n                                        if (response.success) {\n                                            setParticipationJetic(false)\n                                            setJeticErreur(false)\n                                            setPopUpJetic(true)\n                                        } else {\n                                            setJeticErreur(true)\n                                            console.error(response.erreur);\n                                        }\n                                    })\n                                    .catch(err => {\n                                        setJeticErreur(true)\n                                        console.log(err);\n                                    });\n                            }}\n\n                        >\n                            <Form>\n\n                                <div className=\"border border-blue-300 rounded-2xl \">\n                                    <span className=\"text-blue-900 bg-white text-sm relative px-4\" style={{\n                                        \"top\": \"-12px\",\n                                        \"right\": \"-10px\"\n                                    }}>\n                                        Projet\n                                    </span>\n\n                                    <MyTextInput\n                                        label=\"Titre du projet\"\n                                        name=\"titre_projet\"\n                                        id=\"titre_projet\"\n                                        type=\"text\"\n                                    />\n                                    <MyTextArea\n                                        label=\"Description du projet\"\n                                        name=\"description_projet\"\n                                        id=\"description_projet\"\n                                        type=\"text\"\n                                    />\n                                </div>\n\n\n                                <div className=\"border border-blue-300 rounded-2xl mt-8\">\n                                    <span className=\"text-blue-900 bg-white text-sm relative px-4\" style={{\n                                        \"top\": \"-12px\",\n                                        \"right\": \"-10px\"\n                                    }}>\n                                        Travaux pratiques\n                                    </span>\n\n                                    <MyTextInput\n                                        label=\"Titre du TP\"\n                                        name=\"titre_tp\"\n                                        id=\"titre_tp\"\n                                        type=\"text\"\n                                    />\n                                    <MyTextArea\n                                        label=\"Description du TP\"\n                                        name=\"description_tp\"\n                                        id=\"description_tp\"\n                                        type=\"text\"\n                                    />\n                                </div>\n\n\n                                {\n                                    jeticErreur &&\n                                    <p className=\"text-center text-red-700 my-4\">\n                                        Une erreur est survenue\n                                    </p>\n                                }\n\n\n                                <div className=\"flex justify-around\">\n                                    <div className=\"flex justify-between pt-2\">\n                                        <ButtonLight value=\"Annuler\" onClick={() => {\n                                            setParticipationJetic(false)\n                                        }}>\n                                            Annuler\n                                        </ButtonLight>\n                                    </div>\n                                    <div className=\"flex justify-between pt-2\">\n                                        <InputButtonDark type=\"submit\" value=\"Valider\" />\n                                    </div>\n                                </div>\n                            </Form>\n                        </Formik>\n                    }\n                </Modal>\n            }\n\n\n\n\n        </div>\n    )\n}\n","/home/onyx/Documents/DEV/ReactJS/sdi/src/components/Navbar.jsx",[],"/home/onyx/Documents/DEV/ReactJS/sdi/src/components/AccountItems.jsx",[],"/home/onyx/Documents/DEV/ReactJS/sdi/src/components/Form/MyTextArea.jsx",[],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":25,"column":8,"nodeType":"89","messageId":"90","endLine":25,"endColumn":15},{"ruleId":"87","severity":1,"message":"91","line":1,"column":17,"nodeType":"89","messageId":"90","endLine":1,"endColumn":25},{"ruleId":"87","severity":1,"message":"92","line":3,"column":5,"nodeType":"89","messageId":"90","endLine":3,"endColumn":14},{"ruleId":"87","severity":1,"message":"93","line":26,"column":36,"nodeType":"89","messageId":"90","endLine":26,"endColumn":46},{"ruleId":"87","severity":1,"message":"94","line":6,"column":10,"nodeType":"89","messageId":"90","endLine":6,"endColumn":21},{"ruleId":"87","severity":1,"message":"95","line":21,"column":75,"nodeType":"89","messageId":"90","endLine":21,"endColumn":85},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"no-unused-vars","'hexagon' is defined but never used.","Identifier","unusedVar","'Children' is defined but never used.","'useEffect' is defined but never used.","'ButtonDark' is defined but never used.","'phoneRegExp' is defined but never used.","'MyCheckbox' is defined but never used.","no-global-assign","no-unsafe-negation"]